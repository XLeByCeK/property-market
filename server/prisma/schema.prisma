generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String
  birth_date        DateTime?
  created_at        DateTime            @default(now())
  first_name        String
  last_name         String
  phone             String?
  updated_at        DateTime            @updatedAt
  role              String              @default("BUYER")
  favorites         favorite[]
  properties        property[]
  received_messages user_message[]      @relation("recipient")
  sent_messages     user_message[]      @relation("sender")
  subscriptions     user_subscription[]
  view_history      view_history[]
}

model property {
  id                  Int                @id @default(autoincrement())
  title               String
  description         String
  price               Float
  area                Float
  rooms               Int
  floor               Int?
  total_floors        Int?
  address             String
  year_built          Int?
  status              String             @default("active")
  is_new_building     Boolean            @default(false)
  is_commercial       Boolean            @default(false)
  is_country          Boolean            @default(false)
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  property_type_id    Int
  transaction_type_id Int
  user_id             Int
  city_id             Int
  district_id         Int?
  metro_id            Int?
  metro_distance      Float?
  favorites           favorite[]
  city                city               @relation(fields: [city_id], references: [id])
  district            district?          @relation(fields: [district_id], references: [id])
  metro_station       metro_station?     @relation(fields: [metro_id], references: [id])
  property_type       property_type      @relation(fields: [property_type_id], references: [id])
  transaction_type    transaction_type   @relation(fields: [transaction_type_id], references: [id])
  user                users              @relation(fields: [user_id], references: [id])
  features            property_feature[]
  images              property_image[]
  messages            user_message[]
  view_history        view_history[]
}

model property_type {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  properties  property[]
}

model transaction_type {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  properties property[]
}

model property_image {
  id          Int      @id @default(autoincrement())
  image_url   String
  is_main     Boolean  @default(false)
  order       Int      @default(0)
  created_at  DateTime @default(now())
  property_id Int
  property    property @relation(fields: [property_id], references: [id], onDelete: Cascade)
}

model feature {
  id         Int                @id @default(autoincrement())
  name       String             @unique
  category   String?
  properties property_feature[]
}

model property_feature {
  id          Int      @id @default(autoincrement())
  value       String?
  property_id Int
  feature_id  Int
  feature     feature  @relation(fields: [feature_id], references: [id])
  property    property @relation(fields: [property_id], references: [id], onDelete: Cascade)

  @@unique([property_id, feature_id])
}

model city {
  id             Int             @id @default(autoincrement())
  name           String
  region         String?
  country        String?
  districts      district[]
  metro_stations metro_station[]
  properties     property[]

  @@unique([name, country])
}

model district {
  id         Int        @id @default(autoincrement())
  name       String
  city_id    Int
  city       city       @relation(fields: [city_id], references: [id])
  properties property[]

  @@unique([name, city_id])
}

model metro_station {
  id         Int        @id @default(autoincrement())
  name       String
  line       String?
  color      String?
  city_id    Int
  city       city       @relation(fields: [city_id], references: [id])
  properties property[]

  @@unique([name, city_id])
}

model favorite {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  user_id     Int
  property_id Int
  property    property @relation(fields: [property_id], references: [id], onDelete: Cascade)
  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, property_id])
}

model view_history {
  id          Int      @id @default(autoincrement())
  viewed_at   DateTime @default(now())
  user_id     Int
  property_id Int
  property    property @relation(fields: [property_id], references: [id], onDelete: Cascade)
  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, viewed_at(sort: Desc)])
}

model user_message {
  id           Int       @id @default(autoincrement())
  message      String
  is_read      Boolean   @default(false)
  created_at   DateTime  @default(now())
  sender_id    Int
  recipient_id Int
  property_id  Int?
  property     property? @relation(fields: [property_id], references: [id])
  recipient    users     @relation("recipient", fields: [recipient_id], references: [id], onDelete: Cascade)
  sender       users     @relation("sender", fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([recipient_id, is_read, created_at(sort: Desc)])
  @@index([sender_id, created_at(sort: Desc)])
}

model user_subscription {
  id            Int      @id @default(autoincrement())
  name          String
  search_params Json
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user_id       Int
  user          users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
