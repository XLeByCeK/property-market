generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

model users {
    id            Int       @id @default(autoincrement())
    email         String    @unique
    password      String
    first_name    String
    last_name     String
    phone         String?
    birth_date    DateTime?
    role          String    @default("BUYER")
    created_at    DateTime  @default(now())
    updated_at    DateTime  @updatedAt

    // Связи
    properties     property[]
    favorites      favorite[]
    view_history   view_history[]
    sent_messages  user_message[] @relation("sender")
    received_messages user_message[] @relation("recipient")
    subscriptions  user_subscription[]
}

model property {
    id              Int       @id @default(autoincrement())
    title           String
    description     String
    price           Float
    area            Float
    rooms           Int
    floor           Int?
    total_floors    Int?
    address         String
    year_built      Int?
    status          String    @default("active")
    is_new_building Boolean   @default(false)
    is_commercial   Boolean   @default(false)
    is_country      Boolean   @default(false)
    created_at      DateTime  @default(now())
    updated_at      DateTime  @updatedAt

    // Внешние ключи
    property_type_id Int
    transaction_type_id Int
    user_id         Int
    city_id         Int
    district_id     Int?
    metro_id        Int?
    metro_distance  Float?

    // Связи
    property_type   property_type    @relation(fields: [property_type_id], references: [id])
    transaction_type transaction_type @relation(fields: [transaction_type_id], references: [id])
    user            users            @relation(fields: [user_id], references: [id])
    city            city             @relation(fields: [city_id], references: [id])
    district        district?        @relation(fields: [district_id], references: [id])
    metro_station   metro_station?   @relation(fields: [metro_id], references: [id])
    images          property_image[]
    features        property_feature[]
    favorites       favorite[]
    view_history    view_history[]
    messages        user_message[]
}

model property_type {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    description String?

    // Связи
    properties  property[]
}

model transaction_type {
    id          Int       @id @default(autoincrement())
    name        String    @unique

    // Связи
    properties  property[]
}

model property_image {
    id          Int       @id @default(autoincrement())
    image_url   String
    is_main     Boolean   @default(false)
    order       Int       @default(0)
    created_at  DateTime  @default(now())

    // Внешние ключи
    property_id Int

    // Связи
    property    property  @relation(fields: [property_id], references: [id], onDelete: Cascade)
}

model feature {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    category    String?

    // Связи
    properties  property_feature[]
}

model property_feature {
    id          Int       @id @default(autoincrement())
    value       String?

    // Внешние ключи
    property_id Int
    feature_id  Int

    // Связи
    property    property  @relation(fields: [property_id], references: [id], onDelete: Cascade)
    feature     feature   @relation(fields: [feature_id], references: [id])

    // Уникальное сочетание property_id и feature_id
    @@unique([property_id, feature_id])
}

model city {
    id          Int       @id @default(autoincrement())
    name        String
    region      String?
    country     String?

    // Связи
    properties  property[]
    districts   district[]
    metro_stations metro_station[]

    // Уникальное сочетание имени и страны
    @@unique([name, country])
}

model district {
    id          Int       @id @default(autoincrement())
    name        String
    
    // Внешние ключи
    city_id     Int

    // Связи
    city        city      @relation(fields: [city_id], references: [id])
    properties  property[]

    // Уникальное сочетание имени и города
    @@unique([name, city_id])
}

model metro_station {
    id          Int       @id @default(autoincrement())
    name        String
    line        String?
    color       String?
    
    // Внешние ключи
    city_id     Int

    // Связи
    city        city      @relation(fields: [city_id], references: [id])
    properties  property[]

    // Уникальное сочетание имени и города
    @@unique([name, city_id])
}

model favorite {
    id          Int       @id @default(autoincrement())
    created_at  DateTime  @default(now())

    // Внешние ключи
    user_id     Int
    property_id Int

    // Связи
    user        users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    property    property  @relation(fields: [property_id], references: [id], onDelete: Cascade)

    // Уникальное сочетание user_id и property_id
    @@unique([user_id, property_id])
}

model view_history {
    id          Int       @id @default(autoincrement())
    viewed_at   DateTime  @default(now())

    // Внешние ключи
    user_id     Int
    property_id Int

    // Связи
    user        users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    property    property  @relation(fields: [property_id], references: [id], onDelete: Cascade)

    // Индекс для быстрого поиска
    @@index([user_id, viewed_at(sort: Desc)])
}

model user_message {
    id          Int       @id @default(autoincrement())
    message     String
    is_read     Boolean   @default(false)
    created_at  DateTime  @default(now())

    // Внешние ключи
    sender_id   Int
    recipient_id Int
    property_id Int?

    // Связи
    sender      users     @relation("sender", fields: [sender_id], references: [id], onDelete: Cascade)
    recipient   users     @relation("recipient", fields: [recipient_id], references: [id], onDelete: Cascade)
    property    property? @relation(fields: [property_id], references: [id], onDelete: SetNull)

    // Индексы для быстрого поиска сообщений
    @@index([recipient_id, is_read, created_at(sort: Desc)])
    @@index([sender_id, created_at(sort: Desc)])
}

model user_subscription {
    id           Int       @id @default(autoincrement())
    name         String
    search_params Json
    created_at   DateTime  @default(now())
    updated_at   DateTime  @updatedAt

    // Внешние ключи
    user_id      Int

    // Связи
    user         users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Здесь вы можете добавить другие модели в соответствии с вашими потребностями 